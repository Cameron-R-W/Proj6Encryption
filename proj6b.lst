Microsoft (R) Macro Assembler Version 6.11		    12/07/19 04:14:14
proj6b.asm						     Page 1 - 1


				;******************************************************************************************
				;Program Name: proj6b.asm
				;Programmer:   Cameron Weaver
				;Class:        CSCI 2160-001
				;Date:         December 7, 2019
				;Purpose:	   Driver to test external methods within convertMethods
				;******************************************************************************************

					.486
					.model flat
					.stack 100h
					
					ExitProcess 		PROTO Near32 stdcall, dwExitCode:dword
					ascint32			PROTO Near32 stdcall, lpStringToConvert:dword 
					intasc32			PROTO Near32 stdcall, lpStringToHold:dword, dval:dword
					getstring			PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					putstring 			PROTO Near32 stdcall, lpStringToPrint:dword
					hexToCharacter  	PROTO Near32 stdcall, lpDestination:dword, lpSource:dword, numBytes:dword
					charTo4HexDigits	PROTO Near32 stdCall, lpSourceString:dword
					heapAllocHarrison	PROTO Near32 stdcall, dSize:dword
					encrypt32Bit		PROTO Near32 stdCall, lpSourceString:dword, dMask:dword, numBytes:dword
					String_Length 		PROTO Near32 stdcall, lpString: dword
 00000000				.data
				;All data identifiers start in cc 1 and the types line up where possible.
 00000000 0A 0D 0A 0D 09	strHeading	byte	10,13,10,13,9," Name: Cameron Weaver"
	   20 4E 61 6D 65
	   3A 20 43 61 6D
	   65 72 6F 6E 20
	   57 65 61 76 65
	   72
 0000001A  0A 0D 09 43 6C				byte	10,13,9,"Class: CSCI 2160-001"
	   61 73 73 3A 20
	   43 53 43 49 20
	   32 31 36 30 2D
	   30 30 31
 00000031  0A 0D 09 20 44				byte	10,13,9," Date: December 7, 2019"
	   61 74 65 3A 20
	   44 65 63 65 6D
	   62 65 72 20 37
	   2C 20 32 30 31
	   39
 0000004B  0A 0D 09 20 20				byte	10,13,9,"  Lab: Proj6",10,13,0
	   4C 61 62 3A 20
	   50 72 6F 6A 36
	   0A 0D 00
 0000005D			strChar 	byte	9	dup (?)						;store user input for mask
 00000066			sourceStr	byte	100 dup(?)						;Source string for encryption
 000000CA			userStrHex	byte	100 dup(?)						;Stores users string in hex
 0000012E			encryptHex	byte	100 dup(?)						;Stores encrypted string in hex
 00000192			dEncryptHex	byte	100 dup(?)						;Stores de encrypted string in hex
 000001F6			strChars	byte	10	dup(?)						;Null-terminated string of user chars
 00000200			maskHex		byte	20	dup(?)						;Contains encryption key in hex
 00000214 0A 0D 00		crlf		byte	10,13,0							;null-terminated string that skips to next line
 00000217 45 6E 74 65 72	strPrompt	byte	"Enter a 8-hex digit mask",0	
	   20 61 20 38 2D
	   68 65 78 20 64
	   69 67 69 74 20
	   6D 61 73 6B 00
 00000230 45 6E 74 65 72	strPrompt1	byte	"Enter a string to be encrypted",0	
	   20 61 20 73 74
	   72 69 6E 67 20
	   74 6F 20 62 65
	   20 65 6E 63 72
	   79 70 74 65 64
	   00
 0000024F 55 73 65 72 73	strPrompt2	byte	"Users string in Hex:",0	
	   20 73 74 72 69
	   6E 67 20 69 6E
	   20 48 65 78 3A
	   00
 00000264 55 73 65 72 73	strPrompt3	byte	"Users encrypted string in Hex:",0	
	   20 65 6E 63 72
	   79 70 74 65 64
	   20 73 74 72 69
	   6E 67 20 69 6E
	   20 48 65 78 3A
	   00
 00000283 55 73 65 72 73	strPrompt4	byte	"Users de encrypted string in Hex:",0
	   20 64 65 20 65
	   6E 63 72 79 70
	   74 65 64 20 73
	   74 72 69 6E 67
	   20 69 6E 20 48
	   65 78 3A 00
 000002A5 55 73 65 72 73	strPrompt5  byte	"Users Encryption key in Hex:",0	
	   20 45 6E 63 72
	   79 70 74 69 6F
	   6E 20 6B 65 79
	   20 69 6E 20 48
	   65 78 3A 00
 000002C2 00000000		dMasks		dword	?								;contains dword mask
 000002C6 00000000		buffer		dword	?								;buffer between mask and encryption string
 000002CA 00000000		addEncrypt 	dword	?								;address of encryption string
 000002CE 00000000		deEncrypt 	dword	?								;address of de encrypted string
 00000000				.code	
 00000000			_start: 
 00000000  B8 FFFFFFFF			mov eax,-1					;dummy executable statement to aid in debugging.

 00000005 00000005			main	proc					;beginning of the driver
					INVOKE putstring, ADDR strHeading		;Enter user name
					
				;Write your program code	
				;  in here

					;Create mask 
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR strPrompt							;Prompt user to enter a 8-hex digit mask 
					INVOKE putstring, ADDR crlf									;line break
					INVOKE getstring, ADDR strChar, 8							;retrieve users 8-hex digit mask, store in strChar
					INVOKE charTo4HexDigits, ADDR strChar						;returns mask in eax
 00000043  A3 000002C2 R		mov dMasks, eax												;store users mask  
					;Encrypt user string with mask
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR strPrompt1							;Prompt user to enter a string to be encrypted
					INVOKE putstring, ADDR crlf									;line break
					INVOKE getstring, ADDR sourceStr, 101						;Retrieve string to be encrypted from user
					INVOKE String_length, ADDR sourceStr						;returns number of bytes in eax 
					INVOKE encrypt32Bit, ADDR sourceStr, dMasks, eax			;returns address of encrypted string
 0000008D  A3 000002CA R		mov addEncrypt, eax											;addEncrypt contains address of encrypted string
					;Store and display encryption key hex values 
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR crlf									;line break 
					INVOKE putstring, ADDR strPrompt5							;Prompt user "Users Encryption key in Hex:"
					INVOKE hexToCharacter, ADDR maskHex, dMasks, 0				;encryption key ASCII values returned in maskHex
 000000C2  B8 00000000			mov eax, 0													;reset eax to 0 to avoid corrupting invoke
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR maskHex								;Display encryption key back to user
					;Converts and displays user string in hex
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR strPrompt2							;Prompt user "Users string in Hex:"
					INVOKE String_length, ADDR sourceStr						;returns number of bytes in eax
					INVOKE hexToCharacter, ADDR userStrHex, ADDR sourceStr, eax;Convert users string to show hex values
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR userStrHex							;Display users string in hex hev values
					;Converts and displays user encrypted string in hex
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR strPrompt3							;Prompt user "Users encrypted string in Hex:"
					INVOKE String_Length, addEncrypt							;Obtain length of encrypted string
					INVOKE hexToCharacter, ADDR encryptHex, addEncrypt, eax		;return hex values of encrypted string
					INVOKE putstring, ADDR crlf									;line break6
					INVOKE putstring, ADDR  encryptHex							;Display hex values of encrypted string
					;de encrypts user string
					INVOKE String_length, addEncrypt							;returns number of bytes in eax 
					INVOKE encrypt32Bit, addEncrypt, dMasks, eax				;returns address of encrypted string in eax
 00000192  A3 000002CE R		mov deEncrypt, eax 											;deEncrypt -> address of de encrypted string
 00000197  B8 00000000			mov eax, 0													;set eax to 0 to avoid errors in invoke
					;Converts and displays user's de encrypted string in hex
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR strPrompt4							;Prompt user "Users encrypted string in Hex:"
					INVOKE String_length, deEncrypt								;returns number of bytes in eax
					INVOKE hexToCharacter, ADDR dEncryptHex, deEncrypt, eax		;Convert de encrypted string to show hex values
					INVOKE putstring, ADDR crlf									;line break
					INVOKE putstring, ADDR dEncryptHex							;Display users de encrypted string in hex hev values
					
					INVOKE ExitProcess,0				;terminate "normally" the program
 000001F1			main	endp							;end of the "driving program"
					PUBLIC _start
				;any PROCs that you will add later go in here	

					END								;The very LAST line in your program. Terminate assembly
	
Microsoft (R) Macro Assembler Version 6.11		    12/07/19 04:14:14
proj6b.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000100 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D2 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F1 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000005 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_Length  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
charTo4HexDigits . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt32Bit . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
heapAllocHarrison  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToCharacter . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000005 _TEXT	Length= 000001EC Public
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
addEncrypt . . . . . . . . . . .	DWord	 000002CA _DATA	
buffer . . . . . . . . . . . . .	DWord	 000002C6 _DATA	
crlf . . . . . . . . . . . . . .	Byte	 00000214 _DATA	
dEncryptHex  . . . . . . . . . .	Byte	 00000192 _DATA	
dMasks . . . . . . . . . . . . .	DWord	 000002C2 _DATA	
deEncrypt  . . . . . . . . . . .	DWord	 000002CE _DATA	
encryptHex . . . . . . . . . . .	Byte	 0000012E _DATA	
maskHex  . . . . . . . . . . . .	Byte	 00000200 _DATA	
sourceStr  . . . . . . . . . . .	Byte	 00000066 _DATA	
strChars . . . . . . . . . . . .	Byte	 000001F6 _DATA	
strChar  . . . . . . . . . . . .	Byte	 0000005D _DATA	
strHeading . . . . . . . . . . .	Byte	 00000000 _DATA	
strPrompt1 . . . . . . . . . . .	Byte	 00000230 _DATA	
strPrompt2 . . . . . . . . . . .	Byte	 0000024F _DATA	
strPrompt3 . . . . . . . . . . .	Byte	 00000264 _DATA	
strPrompt4 . . . . . . . . . . .	Byte	 00000283 _DATA	
strPrompt5 . . . . . . . . . . .	Byte	 000002A5 _DATA	
strPrompt  . . . . . . . . . . .	Byte	 00000217 _DATA	
userStrHex . . . . . . . . . . .	Byte	 000000CA _DATA	

	   0 Warnings
	   0 Errors
